{"version":3,"sources":["./node_modules/ngx-quill/__ivy_ngcc__/fesm2015/ngx-quill.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2E;AAC+K;AACxN;AACuB;AACS;;AAE1B;AACY;AACV;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,YAAY,GAAG,YAAY;AACrC,UAAU,kBAAkB,GAAG,iBAAiB;AAChD,UAAU,gBAAgB,GAAG,kBAAkB;AAC/C,UAAU,eAAe,GAAG,eAAe;AAC3C,UAAU,mBAAmB;AAC7B,UAAU,0CAA0C;AACpD,UAAU,oCAAoC;AAC9C;AACA,aAAa,YAAY;AACzB,aAAa;AACb;AACA,UAAU,WAAW;AACrB,UAAU,YAAY;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,4DAAc;;AAE7C;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,2DAA2D,uDAAS;AACpE;AACA,0CAA0C,mJAAe;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,mGAAmG,uBAAuB;AAC1H;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,sDAAsD,gCAAgC,sDAAe,sBAAsB;AAC3H,qBAAqB,wEAAkB,EAAE,2CAA2C,yBAAyB,8DAAQ,sBAAsB,EAAE,2CAA2C;AACxL;AACA,KAAK,gCAAgC,OAAO,oDAAM,+BAA+B;AACjF;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0DAAY;AAC/C,mCAAmC,0DAAY;AAC/C,oCAAoC,0DAAY;AAChD,sCAAsC,0DAAY;AAClD,2BAA2B,0DAAY;AACvC,0BAA0B,0DAAY;AACtC,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,6DAAe;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB,gBAAgB,wEAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,yCAAyC,uBAAuB;AAChE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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DAAqB;AAC7B,QAAQ,uDAAgB;AACxB,QAAQ,0DAAmB;AAC3B,KAAK;AACL,QAAQ,wDAAiB;AACzB,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB,6BAA6B,4DAAqB;AAC3E,KAAK,EAAE,eAAe,uDAAc,kDAAkD,cAAc,GAAG,wBAAwB;AAC/H;AACA,KAAK,OAAO,sEAAY,gBAAgB,OAAO,oDAAM,SAAS,sEAAY,IAAI,GAAG;AACjF,KAAK;AACL;AACA;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,aAAa,OAAO,mDAAK,EAAE;AAC3B;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA,+BAA+B,+DAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,sEAAmB;AACzD,sBAAsB,oDAAM;AAC5B,uBAAuB,sEAAY;AACnC,aAAa,GAAG,GAAG,qBAAqB,EAAE,EAAE,GAAG;AAC/C,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,6DAAe;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAS;AACxB,gBAAgB,wEAAgB;AAChC;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,yCAAyC,uBAAuB;AAChE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kEAAkE,sCAAsC,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,CAAC,uDAAgB,GAAG,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,gBAAgB,+DAAwB,CAAC,sEAAmB,GAAG,+DAAwB,CAAC,yDAAW,GAAG;AACxW,0BAA0B,+DAAwB,EAAE,iEAAiE,iQAAiQ,aAAa,kEAA2B,+EAA+E,EAAE,4CAA4C,cAAc,GAAG,wBAAwB;AACpkB;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,uDAAS,EAAE;AACvB,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,qBAAqB;AAC1B,KAAK,OAAO,sEAAY,EAAE;AAC1B,KAAK,gCAAgC,OAAO,oDAAM,SAAS,yDAAW,IAAI;AAC1E;AACA;AACA,cAAc,OAAO,mDAAK,EAAE;AAC5B,aAAa,OAAO,mDAAK,EAAE;AAC3B,eAAe,OAAO,mDAAK,EAAE;AAC7B,aAAa,OAAO,mDAAK,EAAE;AAC3B,eAAe,OAAO,mDAAK,EAAE;AAC7B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,cAAc,OAAO,mDAAK,EAAE;AAC5B,eAAe,OAAO,mDAAK,EAAE;AAC7B,qBAAqB,OAAO,mDAAK,EAAE;AACnC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,0BAA0B,OAAO,mDAAK,EAAE;AACxC;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA,+BAA+B,+DAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,wDAAiB,EAAE,GAAG,OAAO,uDAAgB,EAAE,GAAG,OAAO,oDAAa,EAAE,GAAG,qBAAqB,GAAG,OAAO,sEAAmB,EAAE,GAAG;AACxK,sBAAsB,oDAAM;AAC5B,uBAAuB,yDAAW;AAClC,aAAa,GAAG,EAAE,EAAE,GAAG;AACvB,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8DAAuB,EAAE,oBAAoB;AAChE,mBAAmB,8DAAuB,EAAE,2CAA2C,iCAAiC,EAAE,wCAAwC,4DAAY,IAAI;AAClL,cAAc,oDAAoD,gEAAyB,eAAe,4BAA4B,2EAA2E,EAAE,wBAAwB,SAAS,4DAAY,EAAE,EAAE,wBAAwB,2EAA2E,EAAE,EAAE,EAAE,EAAE;AAC/W,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAY;AACtC;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;;AAEA;AACA;AACA;;AAE4J;;AAE5J,qC","file":"default~apps-apps-module~pages-pages-module-es2015.js","sourcesContent":["import { isPlatformServer, DOCUMENT, CommonModule } from '@angular/common';\r\nimport { InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, EventEmitter, SecurityContext, Directive, ElementRef, PLATFORM_ID, Renderer2, NgZone, Input, Output, Component, ViewEncapsulation, forwardRef, NgModule } from '@angular/core';\r\nimport { __awaiter } from 'tslib';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/platform-browser';\r\nimport * as ɵngcc2 from '@angular/common';\r\n\r\nconst _c0 = [[[\"\", \"quill-editor-toolbar\", \"\"]]];\r\nconst _c1 = [\"[quill-editor-toolbar]\"];\r\nconst defaultModules = {\r\n    toolbar: [\r\n        ['bold', 'italic', 'underline', 'strike'],\r\n        ['blockquote', 'code-block'],\r\n        [{ header: 1 }, { header: 2 }],\r\n        [{ list: 'ordered' }, { list: 'bullet' }],\r\n        [{ script: 'sub' }, { script: 'super' }],\r\n        [{ indent: '-1' }, { indent: '+1' }],\r\n        [{ direction: 'rtl' }],\r\n        [{ size: ['small', false, 'large', 'huge'] }],\r\n        [{ header: [1, 2, 3, 4, 5, 6, false] }],\r\n        [\r\n            { color: [] },\r\n            { background: [] }\r\n        ],\r\n        [{ font: [] }],\r\n        [{ align: [] }],\r\n        ['clean'],\r\n        ['link', 'image', 'video'] // link and image, video\r\n    ]\r\n};\r\n\r\nconst getFormat = (format, configFormat) => {\r\n    const passedFormat = format || configFormat;\r\n    return passedFormat || 'html';\r\n};\r\n\r\nconst QUILL_CONFIG_TOKEN = new InjectionToken('config');\r\n\r\nclass QuillService {\r\n    constructor(config) {\r\n        this.config = config;\r\n        this.count = 0;\r\n        if (!this.config) {\r\n            this.config = { modules: defaultModules };\r\n        }\r\n    }\r\n    getQuill() {\r\n        this.count++;\r\n        if (!this.Quill && this.count === 1) {\r\n            this.$importPromise = new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\r\n                var _a, _b;\r\n                const quillImport = yield import('quill');\r\n                this.Quill = (quillImport.default ? quillImport.default : quillImport);\r\n                // Only register custom options and modules once\r\n                (_a = this.config.customOptions) === null || _a === void 0 ? void 0 : _a.forEach((customOption) => {\r\n                    const newCustomOption = this.Quill.import(customOption.import);\r\n                    newCustomOption.whitelist = customOption.whitelist;\r\n                    this.Quill.register(newCustomOption, true, this.config.suppressGlobalRegisterWarning);\r\n                });\r\n                (_b = this.config.customModules) === null || _b === void 0 ? void 0 : _b.forEach(({ implementation, path }) => {\r\n                    this.Quill.register(path, implementation, this.config.suppressGlobalRegisterWarning);\r\n                });\r\n                resolve(this.Quill);\r\n            }));\r\n        }\r\n        return this.$importPromise;\r\n    }\r\n}\r\nQuillService.ɵfac = function QuillService_Factory(t) { return new (t || QuillService)(ɵngcc0.ɵɵinject(QUILL_CONFIG_TOKEN)); };\r\nQuillService.ɵprov = ɵɵdefineInjectable({ factory: function QuillService_Factory() { return new QuillService(ɵɵinject(QUILL_CONFIG_TOKEN)); }, token: QuillService, providedIn: \"root\" });\r\nQuillService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }\r\n];\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillService, [{\r\n        type: Injectable,\r\n        args: [{\r\n                providedIn: 'root'\r\n            }]\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [QUILL_CONFIG_TOKEN]\r\n            }] }]; }, null); })();\r\n\r\n// tslint:disable-next-line:directive-class-suffix\r\nclass QuillEditorBase {\r\n    constructor(elementRef, domSanitizer, doc, platformId, renderer, zone, service) {\r\n        this.elementRef = elementRef;\r\n        this.domSanitizer = domSanitizer;\r\n        this.doc = doc;\r\n        this.platformId = platformId;\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.service = service;\r\n        this.required = false;\r\n        this.customToolbarPosition = 'top';\r\n        this.sanitize = false;\r\n        this.styles = null;\r\n        this.strict = true;\r\n        this.customOptions = [];\r\n        this.customModules = [];\r\n        this.preserveWhitespace = false;\r\n        this.trimOnValidation = false;\r\n        this.onEditorCreated = new EventEmitter();\r\n        this.onEditorChanged = new EventEmitter();\r\n        this.onContentChanged = new EventEmitter();\r\n        this.onSelectionChanged = new EventEmitter();\r\n        this.onFocus = new EventEmitter();\r\n        this.onBlur = new EventEmitter();\r\n        this.disabled = false; // used to store initial value before ViewInit\r\n        this.valueGetter = (quillEditor, editorElement) => {\r\n            let html = editorElement.querySelector('.ql-editor').innerHTML;\r\n            if (html === '<p><br></p>' || html === '<div><br></div>') {\r\n                html = null;\r\n            }\r\n            let modelValue = html;\r\n            const format = getFormat(this.format, this.service.config.format);\r\n            if (format === 'text') {\r\n                modelValue = quillEditor.getText();\r\n            }\r\n            else if (format === 'object') {\r\n                modelValue = quillEditor.getContents();\r\n            }\r\n            else if (format === 'json') {\r\n                try {\r\n                    modelValue = JSON.stringify(quillEditor.getContents());\r\n                }\r\n                catch (e) {\r\n                    modelValue = quillEditor.getText();\r\n                }\r\n            }\r\n            return modelValue;\r\n        };\r\n        this.valueSetter = (quillEditor, value) => {\r\n            const format = getFormat(this.format, this.service.config.format);\r\n            if (format === 'html') {\r\n                if (this.sanitize) {\r\n                    value = this.domSanitizer.sanitize(SecurityContext.HTML, value);\r\n                }\r\n                return quillEditor.clipboard.convert(value);\r\n            }\r\n            else if (format === 'json') {\r\n                try {\r\n                    return JSON.parse(value);\r\n                }\r\n                catch (e) {\r\n                    return [{ insert: value }];\r\n                }\r\n            }\r\n            return value;\r\n        };\r\n        this.selectionChangeHandler = (range, oldRange, source) => {\r\n            const shouldTriggerOnModelTouched = !range && !!this.onModelTouched;\r\n            // only emit changes when there's any listener\r\n            if (!this.onBlur.observers.length &&\r\n                !this.onFocus.observers.length &&\r\n                !this.onSelectionChanged.observers.length &&\r\n                !shouldTriggerOnModelTouched) {\r\n                return;\r\n            }\r\n            this.zone.run(() => {\r\n                if (range === null) {\r\n                    this.onBlur.emit({\r\n                        editor: this.quillEditor,\r\n                        source\r\n                    });\r\n                }\r\n                else if (oldRange === null) {\r\n                    this.onFocus.emit({\r\n                        editor: this.quillEditor,\r\n                        source\r\n                    });\r\n                }\r\n                this.onSelectionChanged.emit({\r\n                    editor: this.quillEditor,\r\n                    oldRange,\r\n                    range,\r\n                    source\r\n                });\r\n                if (shouldTriggerOnModelTouched) {\r\n                    this.onModelTouched();\r\n                }\r\n            });\r\n        };\r\n        this.textChangeHandler = (delta, oldDelta, source) => {\r\n            // only emit changes emitted by user interactions\r\n            const text = this.quillEditor.getText();\r\n            const content = this.quillEditor.getContents();\r\n            let html = this.editorElem.querySelector('.ql-editor').innerHTML;\r\n            if (html === '<p><br></p>' || html === '<div><br></div>') {\r\n                html = null;\r\n            }\r\n            const trackChanges = this.trackChanges || this.service.config.trackChanges;\r\n            const shouldTriggerOnModelChange = (source === 'user' || trackChanges && trackChanges === 'all') && !!this.onModelChange;\r\n            // only emit changes when there's any listener\r\n            if (!this.onContentChanged.observers.length && !shouldTriggerOnModelChange) {\r\n                return;\r\n            }\r\n            this.zone.run(() => {\r\n                if (shouldTriggerOnModelChange) {\r\n                    this.onModelChange(this.valueGetter(this.quillEditor, this.editorElem));\r\n                }\r\n                this.onContentChanged.emit({\r\n                    content,\r\n                    delta,\r\n                    editor: this.quillEditor,\r\n                    html,\r\n                    oldDelta,\r\n                    source,\r\n                    text\r\n                });\r\n            });\r\n        };\r\n        // tslint:disable-next-line:max-line-length\r\n        this.editorChangeHandler = (event, current, old, source) => {\r\n            // only emit changes when there's any listener\r\n            if (!this.onEditorChanged.observers.length) {\r\n                return;\r\n            }\r\n            // only emit changes emitted by user interactions\r\n            if (event === 'text-change') {\r\n                const text = this.quillEditor.getText();\r\n                const content = this.quillEditor.getContents();\r\n                let html = this.editorElem.querySelector('.ql-editor').innerHTML;\r\n                if (html === '<p><br></p>' || html === '<div><br></div>') {\r\n                    html = null;\r\n                }\r\n                this.zone.run(() => {\r\n                    this.onEditorChanged.emit({\r\n                        content,\r\n                        delta: current,\r\n                        editor: this.quillEditor,\r\n                        event,\r\n                        html,\r\n                        oldDelta: old,\r\n                        source,\r\n                        text\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                this.onEditorChanged.emit({\r\n                    editor: this.quillEditor,\r\n                    event,\r\n                    oldRange: old,\r\n                    range: current,\r\n                    source\r\n                });\r\n            }\r\n        };\r\n    }\r\n    static normalizeClassNames(classes) {\r\n        const classList = classes.trim().split(' ');\r\n        return classList.reduce((prev, cur) => {\r\n            const trimmed = cur.trim();\r\n            if (trimmed) {\r\n                prev.push(trimmed);\r\n            }\r\n            return prev;\r\n        }, []);\r\n    }\r\n    ngAfterViewInit() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (isPlatformServer(this.platformId)) {\r\n                return;\r\n            }\r\n            const Quill = yield this.service.getQuill();\r\n            this.elementRef.nativeElement.insertAdjacentHTML(this.customToolbarPosition === 'top' ? 'beforeend' : 'afterbegin', this.preserveWhitespace ? '<pre quill-editor-element></pre>' : '<div quill-editor-element></div>');\r\n            this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');\r\n            const toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');\r\n            const modules = Object.assign({}, this.modules || this.service.config.modules);\r\n            if (toolbarElem) {\r\n                modules.toolbar = toolbarElem;\r\n            }\r\n            else if (modules.toolbar === undefined) {\r\n                modules.toolbar = defaultModules.toolbar;\r\n            }\r\n            let placeholder = this.placeholder !== undefined ? this.placeholder : this.service.config.placeholder;\r\n            if (placeholder === undefined) {\r\n                placeholder = 'Insert text here ...';\r\n            }\r\n            if (this.styles) {\r\n                Object.keys(this.styles).forEach((key) => {\r\n                    this.renderer.setStyle(this.editorElem, key, this.styles[key]);\r\n                });\r\n            }\r\n            if (this.classes) {\r\n                this.addClasses(this.classes);\r\n            }\r\n            this.customOptions.forEach((customOption) => {\r\n                const newCustomOption = Quill.import(customOption.import);\r\n                newCustomOption.whitelist = customOption.whitelist;\r\n                Quill.register(newCustomOption, true);\r\n            });\r\n            this.customModules.forEach(({ implementation, path }) => {\r\n                Quill.register(path, implementation);\r\n            });\r\n            let bounds = this.bounds && this.bounds === 'self' ? this.editorElem : this.bounds;\r\n            if (!bounds) {\r\n                bounds = this.service.config.bounds ? this.service.config.bounds : this.doc.body;\r\n            }\r\n            let debug = this.debug;\r\n            if (!debug && debug !== false && this.service.config.debug) {\r\n                debug = this.service.config.debug;\r\n            }\r\n            let readOnly = this.readOnly;\r\n            if (!readOnly && this.readOnly !== false) {\r\n                readOnly = this.service.config.readOnly !== undefined ? this.service.config.readOnly : false;\r\n            }\r\n            let scrollingContainer = this.scrollingContainer;\r\n            if (!scrollingContainer && this.scrollingContainer !== null) {\r\n                scrollingContainer =\r\n                    this.service.config.scrollingContainer === null\r\n                        || this.service.config.scrollingContainer ? this.service.config.scrollingContainer : null;\r\n            }\r\n            let formats = this.formats;\r\n            if (!formats && formats === undefined) {\r\n                formats = this.service.config.formats ? [...this.service.config.formats] : (this.service.config.formats === null ? null : undefined);\r\n            }\r\n            this.zone.runOutsideAngular(() => {\r\n                this.quillEditor = new Quill(this.editorElem, {\r\n                    bounds,\r\n                    debug: debug,\r\n                    formats: formats,\r\n                    modules,\r\n                    placeholder,\r\n                    readOnly,\r\n                    scrollingContainer: scrollingContainer,\r\n                    strict: this.strict,\r\n                    theme: this.theme || (this.service.config.theme ? this.service.config.theme : 'snow')\r\n                });\r\n            });\r\n            if (this.content) {\r\n                const format = getFormat(this.format, this.service.config.format);\r\n                if (format === 'object') {\r\n                    this.quillEditor.setContents(this.content, 'silent');\r\n                }\r\n                else if (format === 'text') {\r\n                    this.quillEditor.setText(this.content, 'silent');\r\n                }\r\n                else if (format === 'json') {\r\n                    try {\r\n                        this.quillEditor.setContents(JSON.parse(this.content), 'silent');\r\n                    }\r\n                    catch (e) {\r\n                        this.quillEditor.setText(this.content, 'silent');\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.sanitize) {\r\n                        this.content = this.domSanitizer.sanitize(SecurityContext.HTML, this.content);\r\n                    }\r\n                    const contents = this.quillEditor.clipboard.convert(this.content);\r\n                    this.quillEditor.setContents(contents, 'silent');\r\n                }\r\n                this.quillEditor.getModule('history').clear();\r\n            }\r\n            // initialize disabled status based on this.disabled as default value\r\n            this.setDisabledState();\r\n            // triggered if selection or text changed\r\n            this.quillEditor.on('editor-change', this.editorChangeHandler);\r\n            // mark model as touched if editor lost focus\r\n            this.quillEditor.on('selection-change', this.selectionChangeHandler);\r\n            // update model if text changes\r\n            this.quillEditor.on('text-change', this.textChangeHandler);\r\n            // trigger created in a timeout to avoid changed models after checked\r\n            // if you are using the editor api in created output to change the editor content\r\n            setTimeout(() => {\r\n                if (this.onValidatorChanged) {\r\n                    this.onValidatorChanged();\r\n                }\r\n                this.onEditorCreated.emit(this.quillEditor);\r\n            });\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.quillEditor) {\r\n            this.quillEditor.off('selection-change', this.selectionChangeHandler);\r\n            this.quillEditor.off('text-change', this.textChangeHandler);\r\n            this.quillEditor.off('editor-change', this.editorChangeHandler);\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (!this.quillEditor) {\r\n            return;\r\n        }\r\n        // tslint:disable:no-string-literal\r\n        if (changes['readOnly']) {\r\n            this.quillEditor.enable(!changes['readOnly'].currentValue);\r\n        }\r\n        if (changes['placeholder']) {\r\n            this.quillEditor.root.dataset.placeholder =\r\n                changes['placeholder'].currentValue;\r\n        }\r\n        if (changes['styles']) {\r\n            const currentStyling = changes['styles'].currentValue;\r\n            const previousStyling = changes['styles'].previousValue;\r\n            if (previousStyling) {\r\n                Object.keys(previousStyling).forEach((key) => {\r\n                    this.renderer.removeStyle(this.editorElem, key);\r\n                });\r\n            }\r\n            if (currentStyling) {\r\n                Object.keys(currentStyling).forEach((key) => {\r\n                    this.renderer.setStyle(this.editorElem, key, this.styles[key]);\r\n                });\r\n            }\r\n        }\r\n        if (changes['classes']) {\r\n            const currentClasses = changes['classes'].currentValue;\r\n            const previousClasses = changes['classes'].previousValue;\r\n            if (previousClasses) {\r\n                this.removeClasses(previousClasses);\r\n            }\r\n            if (currentClasses) {\r\n                this.addClasses(currentClasses);\r\n            }\r\n        }\r\n        // tslint:enable:no-string-literal\r\n    }\r\n    addClasses(classList) {\r\n        QuillEditorBase.normalizeClassNames(classList).forEach((c) => {\r\n            this.renderer.addClass(this.editorElem, c);\r\n        });\r\n    }\r\n    removeClasses(classList) {\r\n        QuillEditorBase.normalizeClassNames(classList).forEach((c) => {\r\n            this.renderer.removeClass(this.editorElem, c);\r\n        });\r\n    }\r\n    writeValue(currentValue) {\r\n        this.content = currentValue;\r\n        const format = getFormat(this.format, this.service.config.format);\r\n        if (this.quillEditor) {\r\n            if (currentValue) {\r\n                if (format === 'text') {\r\n                    this.quillEditor.setText(currentValue);\r\n                }\r\n                else {\r\n                    this.quillEditor.setContents(this.valueSetter(this.quillEditor, this.content));\r\n                }\r\n                return;\r\n            }\r\n            this.quillEditor.setText('');\r\n        }\r\n    }\r\n    setDisabledState(isDisabled = this.disabled) {\r\n        // store initial value to set appropriate disabled status after ViewInit\r\n        this.disabled = isDisabled;\r\n        if (this.quillEditor) {\r\n            if (isDisabled) {\r\n                this.quillEditor.disable();\r\n                this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');\r\n            }\r\n            else {\r\n                if (!this.readOnly) {\r\n                    this.quillEditor.enable();\r\n                }\r\n                this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\r\n            }\r\n        }\r\n    }\r\n    registerOnChange(fn) {\r\n        this.onModelChange = fn;\r\n    }\r\n    registerOnTouched(fn) {\r\n        this.onModelTouched = fn;\r\n    }\r\n    registerOnValidatorChange(fn) {\r\n        this.onValidatorChanged = fn;\r\n    }\r\n    validate() {\r\n        if (!this.quillEditor) {\r\n            return null;\r\n        }\r\n        const err = {};\r\n        let valid = true;\r\n        const text = this.quillEditor.getText();\r\n        // trim text if wanted + handle special case that an empty editor contains a new line\r\n        const textLength = this.trimOnValidation ? text.trim().length : (text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1);\r\n        if (this.minLength && textLength && textLength < this.minLength) {\r\n            err.minLengthError = {\r\n                given: textLength,\r\n                minLength: this.minLength\r\n            };\r\n            valid = false;\r\n        }\r\n        if (this.maxLength && textLength > this.maxLength) {\r\n            err.maxLengthError = {\r\n                given: textLength,\r\n                maxLength: this.maxLength\r\n            };\r\n            valid = false;\r\n        }\r\n        if (this.required && !textLength) {\r\n            err.requiredError = {\r\n                empty: true\r\n            };\r\n            valid = false;\r\n        }\r\n        return valid ? null : err;\r\n    }\r\n}\r\nQuillEditorBase.ɵfac = function QuillEditorBase_Factory(t) { return new (t || QuillEditorBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(QuillService)); };\r\nQuillEditorBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: QuillEditorBase, inputs: { required: \"required\", customToolbarPosition: \"customToolbarPosition\", sanitize: \"sanitize\", styles: \"styles\", strict: \"strict\", customOptions: \"customOptions\", customModules: \"customModules\", preserveWhitespace: \"preserveWhitespace\", trimOnValidation: \"trimOnValidation\", valueGetter: \"valueGetter\", valueSetter: \"valueSetter\", format: \"format\", theme: \"theme\", modules: \"modules\", debug: \"debug\", readOnly: \"readOnly\", placeholder: \"placeholder\", maxLength: \"maxLength\", minLength: \"minLength\", formats: \"formats\", scrollingContainer: \"scrollingContainer\", bounds: \"bounds\", trackChanges: \"trackChanges\", classes: \"classes\" }, outputs: { onEditorCreated: \"onEditorCreated\", onEditorChanged: \"onEditorChanged\", onContentChanged: \"onContentChanged\", onSelectionChanged: \"onSelectionChanged\", onFocus: \"onFocus\", onBlur: \"onBlur\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\r\nQuillEditorBase.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: DomSanitizer },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\r\n    { type: Renderer2 },\r\n    { type: NgZone },\r\n    { type: QuillService }\r\n];\r\nQuillEditorBase.propDecorators = {\r\n    format: [{ type: Input }],\r\n    theme: [{ type: Input }],\r\n    modules: [{ type: Input }],\r\n    debug: [{ type: Input }],\r\n    readOnly: [{ type: Input }],\r\n    placeholder: [{ type: Input }],\r\n    maxLength: [{ type: Input }],\r\n    minLength: [{ type: Input }],\r\n    required: [{ type: Input }],\r\n    formats: [{ type: Input }],\r\n    customToolbarPosition: [{ type: Input }],\r\n    sanitize: [{ type: Input }],\r\n    styles: [{ type: Input }],\r\n    strict: [{ type: Input }],\r\n    scrollingContainer: [{ type: Input }],\r\n    bounds: [{ type: Input }],\r\n    customOptions: [{ type: Input }],\r\n    customModules: [{ type: Input }],\r\n    trackChanges: [{ type: Input }],\r\n    preserveWhitespace: [{ type: Input }],\r\n    classes: [{ type: Input }],\r\n    trimOnValidation: [{ type: Input }],\r\n    onEditorCreated: [{ type: Output }],\r\n    onEditorChanged: [{ type: Output }],\r\n    onContentChanged: [{ type: Output }],\r\n    onSelectionChanged: [{ type: Output }],\r\n    onFocus: [{ type: Output }],\r\n    onBlur: [{ type: Output }],\r\n    valueGetter: [{ type: Input }],\r\n    valueSetter: [{ type: Input }]\r\n};\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillEditorBase, [{\r\n        type: Directive\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.DomSanitizer }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: QuillService }]; }, { required: [{\r\n            type: Input\r\n        }], customToolbarPosition: [{\r\n            type: Input\r\n        }], sanitize: [{\r\n            type: Input\r\n        }], styles: [{\r\n            type: Input\r\n        }], strict: [{\r\n            type: Input\r\n        }], customOptions: [{\r\n            type: Input\r\n        }], customModules: [{\r\n            type: Input\r\n        }], preserveWhitespace: [{\r\n            type: Input\r\n        }], trimOnValidation: [{\r\n            type: Input\r\n        }], onEditorCreated: [{\r\n            type: Output\r\n        }], onEditorChanged: [{\r\n            type: Output\r\n        }], onContentChanged: [{\r\n            type: Output\r\n        }], onSelectionChanged: [{\r\n            type: Output\r\n        }], onFocus: [{\r\n            type: Output\r\n        }], onBlur: [{\r\n            type: Output\r\n        }], valueGetter: [{\r\n            type: Input\r\n        }], valueSetter: [{\r\n            type: Input\r\n        }], format: [{\r\n            type: Input\r\n        }], theme: [{\r\n            type: Input\r\n        }], modules: [{\r\n            type: Input\r\n        }], debug: [{\r\n            type: Input\r\n        }], readOnly: [{\r\n            type: Input\r\n        }], placeholder: [{\r\n            type: Input\r\n        }], maxLength: [{\r\n            type: Input\r\n        }], minLength: [{\r\n            type: Input\r\n        }], formats: [{\r\n            type: Input\r\n        }], scrollingContainer: [{\r\n            type: Input\r\n        }], bounds: [{\r\n            type: Input\r\n        }], trackChanges: [{\r\n            type: Input\r\n        }], classes: [{\r\n            type: Input\r\n        }] }); })();\r\nclass QuillEditorComponent extends QuillEditorBase {\r\n    constructor(elementRef, domSanitizer, doc, platformId, renderer, zone, service) {\r\n        super(elementRef, domSanitizer, doc, platformId, renderer, zone, service);\r\n    }\r\n}\r\nQuillEditorComponent.ɵfac = function QuillEditorComponent_Factory(t) { return new (t || QuillEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(DomSanitizer), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(QuillService)); };\r\nQuillEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QuillEditorComponent, selectors: [[\"quill-editor\"]], features: [ɵngcc0.ɵɵProvidersFeature([\r\n            {\r\n                multi: true,\r\n                provide: NG_VALUE_ACCESSOR,\r\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n                useExisting: forwardRef(() => QuillEditorComponent)\r\n            },\r\n            {\r\n                multi: true,\r\n                provide: NG_VALIDATORS,\r\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n                useExisting: forwardRef(() => QuillEditorComponent)\r\n            }\r\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, template: function QuillEditorComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef(_c0);\r\n        ɵngcc0.ɵɵprojection(0);\r\n    } }, encapsulation: 2 });\r\nQuillEditorComponent.ctorParameters = () => [\r\n    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },\r\n    { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\r\n    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },\r\n    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },\r\n    { type: QuillService, decorators: [{ type: Inject, args: [QuillService,] }] }\r\n];\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillEditorComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                encapsulation: ViewEncapsulation.None,\r\n                providers: [\r\n                    {\r\n                        multi: true,\r\n                        provide: NG_VALUE_ACCESSOR,\r\n                        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n                        useExisting: forwardRef(() => QuillEditorComponent)\r\n                    },\r\n                    {\r\n                        multi: true,\r\n                        provide: NG_VALIDATORS,\r\n                        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n                        useExisting: forwardRef(() => QuillEditorComponent)\r\n                    }\r\n                ],\r\n                selector: 'quill-editor',\r\n                template: `\r\n  <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\r\n`\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef, decorators: [{\r\n                type: Inject,\r\n                args: [ElementRef]\r\n            }] }, { type: ɵngcc1.DomSanitizer, decorators: [{\r\n                type: Inject,\r\n                args: [DomSanitizer]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }, { type: ɵngcc0.Renderer2, decorators: [{\r\n                type: Inject,\r\n                args: [Renderer2]\r\n            }] }, { type: ɵngcc0.NgZone, decorators: [{\r\n                type: Inject,\r\n                args: [NgZone]\r\n            }] }, { type: QuillService, decorators: [{\r\n                type: Inject,\r\n                args: [QuillService]\r\n            }] }]; }, null); })();\r\n\r\nclass QuillViewHTMLComponent {\r\n    constructor(sanitizer, service) {\r\n        this.sanitizer = sanitizer;\r\n        this.service = service;\r\n        this.innerHTML = '';\r\n        this.themeClass = 'ql-snow';\r\n        this.content = '';\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.theme) {\r\n            const theme = changes.theme.currentValue || (this.service.config.theme ? this.service.config.theme : 'snow');\r\n            this.themeClass = `ql-${theme} ngx-quill-view-html`;\r\n        }\r\n        else if (!this.theme) {\r\n            const theme = this.service.config.theme ? this.service.config.theme : 'snow';\r\n            this.themeClass = `ql-${theme} ngx-quill-view-html`;\r\n        }\r\n        if (changes.content) {\r\n            this.innerHTML = this.sanitizer.bypassSecurityTrustHtml(changes.content.currentValue);\r\n        }\r\n    }\r\n}\r\nQuillViewHTMLComponent.ɵfac = function QuillViewHTMLComponent_Factory(t) { return new (t || QuillViewHTMLComponent)(ɵngcc0.ɵɵdirectiveInject(DomSanitizer), ɵngcc0.ɵɵdirectiveInject(QuillService)); };\r\nQuillViewHTMLComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QuillViewHTMLComponent, selectors: [[\"quill-view-html\"]], inputs: { content: \"content\", theme: \"theme\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [[1, \"ql-container\", 3, \"ngClass\"], [1, \"ql-editor\", 3, \"innerHTML\"]], template: function QuillViewHTMLComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\r\n        ɵngcc0.ɵɵelement(1, \"div\", 1);\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.themeClass);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"innerHTML\", ctx.innerHTML, ɵngcc0.ɵɵsanitizeHtml);\r\n    } }, directives: [ɵngcc2.NgClass], styles: [\"\\n.ql-container.ngx-quill-view-html {\\n  border: 0;\\n}\\n\"], encapsulation: 2 });\r\nQuillViewHTMLComponent.ctorParameters = () => [\r\n    { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },\r\n    { type: QuillService }\r\n];\r\nQuillViewHTMLComponent.propDecorators = {\r\n    content: [{ type: Input }],\r\n    theme: [{ type: Input }]\r\n};\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillViewHTMLComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                encapsulation: ViewEncapsulation.None,\r\n                selector: 'quill-view-html',\r\n                template: `\r\n  <div class=\"ql-container\" [ngClass]=\"themeClass\">\r\n    <div class=\"ql-editor\" [innerHTML]=\"innerHTML\">\r\n    </div>\r\n  </div>\r\n`,\r\n                styles: [`\r\n.ql-container.ngx-quill-view-html {\r\n  border: 0;\r\n}\r\n`]\r\n            }]\r\n    }], function () { return [{ type: ɵngcc1.DomSanitizer, decorators: [{\r\n                type: Inject,\r\n                args: [DomSanitizer]\r\n            }] }, { type: QuillService }]; }, { content: [{\r\n            type: Input\r\n        }], theme: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\nclass QuillViewComponent {\r\n    constructor(elementRef, renderer, zone, service, domSanitizer, platformId) {\r\n        this.elementRef = elementRef;\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.service = service;\r\n        this.domSanitizer = domSanitizer;\r\n        this.platformId = platformId;\r\n        this.sanitize = false;\r\n        this.strict = true;\r\n        this.customModules = [];\r\n        this.customOptions = [];\r\n        this.preserveWhitespace = false;\r\n        this.valueSetter = (quillEditor, value) => {\r\n            const format = getFormat(this.format, this.service.config.format);\r\n            let content = value;\r\n            if (format === 'text') {\r\n                quillEditor.setText(content);\r\n            }\r\n            else {\r\n                if (format === 'html') {\r\n                    if (this.sanitize) {\r\n                        value = this.domSanitizer.sanitize(SecurityContext.HTML, value);\r\n                    }\r\n                    content = quillEditor.clipboard.convert(value);\r\n                }\r\n                else if (format === 'json') {\r\n                    try {\r\n                        content = JSON.parse(value);\r\n                    }\r\n                    catch (e) {\r\n                        content = [{ insert: value }];\r\n                    }\r\n                }\r\n                quillEditor.setContents(content);\r\n            }\r\n        };\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (!this.quillEditor) {\r\n            return;\r\n        }\r\n        if (changes.content) {\r\n            this.valueSetter(this.quillEditor, changes.content.currentValue);\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (isPlatformServer(this.platformId)) {\r\n                return;\r\n            }\r\n            const Quill = yield this.service.getQuill();\r\n            const modules = Object.assign({}, this.modules || this.service.config.modules);\r\n            modules.toolbar = false;\r\n            this.customOptions.forEach((customOption) => {\r\n                const newCustomOption = Quill.import(customOption.import);\r\n                newCustomOption.whitelist = customOption.whitelist;\r\n                Quill.register(newCustomOption, true);\r\n            });\r\n            this.customModules.forEach(({ implementation, path }) => {\r\n                Quill.register(path, implementation);\r\n            });\r\n            let debug = this.debug;\r\n            if (!debug && debug !== false && this.service.config.debug) {\r\n                debug = this.service.config.debug;\r\n            }\r\n            let formats = this.formats;\r\n            if (!formats && formats === undefined) {\r\n                formats = this.service.config.formats ?\r\n                    Object.assign({}, this.service.config.formats) : (this.service.config.formats === null ? null : undefined);\r\n            }\r\n            const theme = this.theme || (this.service.config.theme ? this.service.config.theme : 'snow');\r\n            this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');\r\n            this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');\r\n            this.zone.runOutsideAngular(() => {\r\n                this.quillEditor = new Quill(this.editorElem, {\r\n                    debug: debug,\r\n                    formats: formats,\r\n                    modules,\r\n                    readOnly: true,\r\n                    strict: this.strict,\r\n                    theme\r\n                });\r\n            });\r\n            this.renderer.addClass(this.editorElem, 'ngx-quill-view');\r\n            if (this.content) {\r\n                this.valueSetter(this.quillEditor, this.content);\r\n            }\r\n        });\r\n    }\r\n}\r\nQuillViewComponent.ɵfac = function QuillViewComponent_Factory(t) { return new (t || QuillViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(QuillService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };\r\nQuillViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QuillViewComponent, selectors: [[\"quill-view\"]], inputs: { sanitize: \"sanitize\", strict: \"strict\", customModules: \"customModules\", customOptions: \"customOptions\", preserveWhitespace: \"preserveWhitespace\", format: \"format\", theme: \"theme\", modules: \"modules\", debug: \"debug\", formats: \"formats\", content: \"content\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function QuillViewComponent_Template(rf, ctx) { }, styles: [\"\\n.ql-container.ngx-quill-view {\\n  border: 0;\\n}\\n\"], encapsulation: 2 });\r\nQuillViewComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Renderer2 },\r\n    { type: NgZone },\r\n    { type: QuillService },\r\n    { type: DomSanitizer },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\nQuillViewComponent.propDecorators = {\r\n    format: [{ type: Input }],\r\n    theme: [{ type: Input }],\r\n    modules: [{ type: Input }],\r\n    debug: [{ type: Input }],\r\n    formats: [{ type: Input }],\r\n    sanitize: [{ type: Input }],\r\n    strict: [{ type: Input }],\r\n    content: [{ type: Input }],\r\n    customModules: [{ type: Input }],\r\n    customOptions: [{ type: Input }],\r\n    preserveWhitespace: [{ type: Input }]\r\n};\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillViewComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                encapsulation: ViewEncapsulation.None,\r\n                selector: 'quill-view',\r\n                template: `\r\n`,\r\n                styles: [`\r\n.ql-container.ngx-quill-view {\r\n  border: 0;\r\n}\r\n`]\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: QuillService }, { type: ɵngcc1.DomSanitizer }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }]; }, { sanitize: [{\r\n            type: Input\r\n        }], strict: [{\r\n            type: Input\r\n        }], customModules: [{\r\n            type: Input\r\n        }], customOptions: [{\r\n            type: Input\r\n        }], preserveWhitespace: [{\r\n            type: Input\r\n        }], format: [{\r\n            type: Input\r\n        }], theme: [{\r\n            type: Input\r\n        }], modules: [{\r\n            type: Input\r\n        }], debug: [{\r\n            type: Input\r\n        }], formats: [{\r\n            type: Input\r\n        }], content: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\nclass QuillModule {\r\n    static forRoot(config) {\r\n        return {\r\n            ngModule: QuillModule,\r\n            providers: [\r\n                {\r\n                    provide: QUILL_CONFIG_TOKEN,\r\n                    useValue: config\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\nQuillModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: QuillModule });\r\nQuillModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function QuillModule_Factory(t) { return new (t || QuillModule)(); }, providers: [QuillService], imports: [[CommonModule]] });\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QuillModule, { declarations: function () { return [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent]; } }); })();\r\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                declarations: [\r\n                    QuillEditorComponent,\r\n                    QuillViewComponent,\r\n                    QuillViewHTMLComponent\r\n                ],\r\n                exports: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent],\r\n                imports: [CommonModule],\r\n                providers: [QuillService]\r\n            }]\r\n    }], null, null); })();\r\n\r\n/*\r\n * Public API Surface of ngx-quill\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { QUILL_CONFIG_TOKEN, QuillEditorBase, QuillEditorComponent, QuillModule, QuillService, QuillViewComponent, QuillViewHTMLComponent, defaultModules };\r\n\r\n//# sourceMappingURL=ngx-quill.js.map"],"sourceRoot":"webpack:///"}